{
	"compiler": {
		"version": "0.8.28+commit.7893614a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "researcher",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_rewardAmountPerParticipantInWei",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_targetNumberOfParticipants",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "cUSDToken",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ECDSAInvalidSignature",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "ECDSAInvalidSignatureLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "ECDSAInvalidSignatureS",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EnforcedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExpectedPause",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "participant",
						"type": "address"
					}
				],
				"name": "ParticipantMarkedAsRewarded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "participant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardAmount",
						"type": "uint256"
					}
				],
				"name": "ParticipantRewarded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "participant",
						"type": "address"
					}
				],
				"name": "ParticipantScreened",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldcUSDRewardAmountPerParticipantInWei",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newcUSDRewardAmountPerParticipantInWei",
						"type": "uint256"
					}
				],
				"name": "RewardAmountUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "researcher",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardAmount",
						"type": "uint256"
					}
				],
				"name": "RewardFundsWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "participant",
						"type": "address"
					}
				],
				"name": "SignatureUsed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldTargetNumberOfParticipants",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newTargetNumberOfParticipants",
						"type": "uint256"
					}
				],
				"name": "TargetNumberOfParticipantsUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "cUSD",
				"outputs": [
					{
						"internalType": "contract IERC20Metadata",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "participant",
						"type": "address"
					}
				],
				"name": "checkIfParticipantIsScreened",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "checkIfSignatureIsUsed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNumberOfClaimedRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNumberOfRewardedParticipants",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNumberOfScreenedParticipants",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNumberOfUsedSignatures",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRewardAmountPerParticipantInWei",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTargetNumberOfParticipants",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numberOfScreenedParticipants",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numberOfUsedSignatures",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pauseSurvey",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "participant",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "rewardId",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "processRewardClaimByParticipant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardAmountPerParticipantInWei",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "participant",
						"type": "address"
					}
				],
				"name": "screenParticipant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "targetNumberOfParticipants",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpauseSurvey",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newRewardAmountPerParticipantInWei",
						"type": "uint256"
					}
				],
				"name": "updateRewardAmountPerParticipant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newTargetNumberOfParticipants",
						"type": "uint256"
					}
				],
				"name": "updateTargetNumberOfParticipants",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawAllRewardFundsToResearcher",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Inherits from Ownable for access control, ReentrancyGuard for security, and Pausable for emergency stops",
			"errors": {
				"ECDSAInvalidSignature()": [
					{
						"details": "The signature derives the `address(0)`."
					}
				],
				"ECDSAInvalidSignatureLength(uint256)": [
					{
						"details": "The signature has an invalid length."
					}
				],
				"ECDSAInvalidSignatureS(bytes32)": [
					{
						"details": "The signature has an S value that is in the upper half order."
					}
				],
				"EnforcedPause()": [
					{
						"details": "The operation failed because the contract is paused."
					}
				],
				"ExpectedPause()": [
					{
						"details": "The operation failed because the contract is not paused."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				]
			},
			"events": {
				"ParticipantMarkedAsRewarded(address)": {
					"params": {
						"participant": "The address of the participant marked as rewarded"
					}
				},
				"ParticipantRewarded(address,uint256)": {
					"params": {
						"participant": "The address of the rewarded participant",
						"rewardAmount": "The amount of cUSD rewarded in wei"
					}
				},
				"ParticipantScreened(address)": {
					"params": {
						"participant": "The address of the screened participant"
					}
				},
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"RewardAmountUpdated(uint256,uint256)": {
					"params": {
						"newcUSDRewardAmountPerParticipantInWei": "The new reward amount",
						"oldcUSDRewardAmountPerParticipantInWei": "The previous reward amount"
					}
				},
				"RewardFundsWithdrawn(address,uint256)": {
					"params": {
						"researcher": "The address of the researcher who withdrew the funds",
						"rewardAmount": "The amount of cUSD withdrawn in wei"
					}
				},
				"SignatureUsed(bytes,address)": {
					"params": {
						"participant": "The address of the participant who used the signature",
						"signature": "The signature that was used"
					}
				},
				"TargetNumberOfParticipantsUpdated(uint256,uint256)": {
					"params": {
						"newTargetNumberOfParticipants": "The new target number",
						"oldTargetNumberOfParticipants": "The previous target number"
					}
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				}
			},
			"kind": "dev",
			"methods": {
				"checkIfParticipantIsScreened(address)": {
					"params": {
						"participant": "- Address of the participant to check"
					},
					"returns": {
						"_0": "bool True if the participant has been screened"
					}
				},
				"checkIfSignatureIsUsed(bytes)": {
					"params": {
						"signature": "Cryptographic signature generated by the contract owner"
					},
					"returns": {
						"_0": "bool True if the signature has been used"
					}
				},
				"constructor": {
					"details": "Sets up the contract with researcher address, reward amount, participant target, and cUSD token",
					"params": {
						"_rewardAmountPerParticipantInWei": "Amount in wei to reward each participant",
						"_targetNumberOfParticipants": "Maximum number of participants for the survey",
						"cUSDToken": "Address of the cUSD token contract",
						"researcher": "Address of the researcher who will own and manage the contract"
					}
				},
				"getNumberOfClaimedRewards()": {
					"returns": {
						"_0": "uint256 The number of claimed rewards"
					}
				},
				"getNumberOfRewardedParticipants()": {
					"returns": {
						"_0": "uint256 The number of participants who have been rewarded"
					}
				},
				"getNumberOfScreenedParticipants()": {
					"returns": {
						"_0": "uint256 The number of screened participants"
					}
				},
				"getNumberOfUsedSignatures()": {
					"returns": {
						"_0": "uint256 The number of used signatures"
					}
				},
				"getRewardAmountPerParticipantInWei()": {
					"returns": {
						"_0": "uint256 The reward amount in wei"
					}
				},
				"getTargetNumberOfParticipants()": {
					"returns": {
						"_0": "uint256 The maximum number of participants allowed"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pauseSurvey()": {
					"details": "Can only be called by the contract owner"
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"processRewardClaimByParticipant(address,string,uint256,bytes)": {
					"details": "Processes the reward claim if all conditions are met and signature is valid",
					"params": {
						"nonce": "Unique number to prevent relay attacks",
						"participant": "Address of the participant claiming the reward",
						"rewardId": "Unique identifier for this reward claim",
						"signature": "Cryptographic signature from the contract owner"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"screenParticipant(address)": {
					"details": "Marks a [participant] as [true] in [participantsScreenedForSurvey]."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unpauseSurvey()": {
					"details": "Can only be called by the contract owner"
				},
				"updateRewardAmountPerParticipant(uint256)": {
					"details": "Can only be called by the contract owner",
					"params": {
						"_newRewardAmountPerParticipantInWei": "- New reward amount in wei"
					}
				},
				"updateTargetNumberOfParticipants(uint256)": {
					"details": "Can only be called by the contract owner",
					"params": {
						"_newTargetNumberOfParticipants": "- New target number of participants"
					}
				},
				"withdrawAllRewardFundsToResearcher()": {
					"details": "Can only be called by the contract owner when the contract is not paused"
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"ParticipantMarkedAsRewarded(address)": {
					"notice": "Emitted when a participant is marked as having received their reward"
				},
				"ParticipantRewarded(address,uint256)": {
					"notice": "Emitted when a participant successfully claims their reward"
				},
				"ParticipantScreened(address)": {
					"notice": "Emitted when a participant completes the screening process"
				},
				"RewardAmountUpdated(uint256,uint256)": {
					"notice": "Emitted when the reward amount per participant is updated"
				},
				"RewardFundsWithdrawn(address,uint256)": {
					"notice": "Emitted when reward funds are withdrawn by the researcher"
				},
				"SignatureUsed(bytes,address)": {
					"notice": "Emitted when a signature is used to claim a reward"
				},
				"TargetNumberOfParticipantsUpdated(uint256,uint256)": {
					"notice": "Emitted when the target number of participants is updated"
				}
			},
			"kind": "user",
			"methods": {
				"cUSD()": {
					"notice": "Reference to the cUSD token contract"
				},
				"checkIfParticipantIsScreened(address)": {
					"notice": "Checks if a given participant has been screened"
				},
				"checkIfSignatureIsUsed(bytes)": {
					"notice": "Checks if a given signature has been used"
				},
				"constructor": {
					"notice": "Initializes the survey contract with initial parameters"
				},
				"getNumberOfClaimedRewards()": {
					"notice": "Gets the number of rewards that have been claimed"
				},
				"getNumberOfRewardedParticipants()": {
					"notice": "Gets the current number of rewarded participants"
				},
				"getNumberOfScreenedParticipants()": {
					"notice": "Gets the number of participants who have been screened"
				},
				"getNumberOfUsedSignatures()": {
					"notice": "Gets the number of signatures that have been used"
				},
				"getRewardAmountPerParticipantInWei()": {
					"notice": "Gets the current reward amount per participant"
				},
				"getTargetNumberOfParticipants()": {
					"notice": "Gets the target number of participants"
				},
				"numberOfScreenedParticipants()": {
					"notice": "Counter for number of participants who have been screened"
				},
				"numberOfUsedSignatures()": {
					"notice": "Counter for number of signatures that have been used"
				},
				"pauseSurvey()": {
					"notice": "Pauses all reward claims and withdrawals"
				},
				"processRewardClaimByParticipant(address,string,uint256,bytes)": {
					"notice": "Allows a participant to claim their reward using a valid signature"
				},
				"rewardAmountPerParticipantInWei()": {
					"notice": "Amount of cUSD to reward each participant"
				},
				"targetNumberOfParticipants()": {
					"notice": "Maximum number of participants allowed in the survey"
				},
				"unpauseSurvey()": {
					"notice": "Resumes reward claims and withdrawals"
				},
				"updateRewardAmountPerParticipant(uint256)": {
					"notice": "Updates the reward amount per participant"
				},
				"updateTargetNumberOfParticipants(uint256)": {
					"notice": "Updates the target number of participants for the survey"
				},
				"withdrawAllRewardFundsToResearcher()": {
					"notice": "Allows the researcher to withdraw all remaining cUSD from the contract"
				}
			},
			"notice": "Contract for managing a closed survey system with participant rewards",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"smart-contract/hardhat/contracts/ClosedSurveyV4.sol": "ClosedSurveyV4"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/Pausable.sol": {
			"keccak256": "0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc",
				"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc"
			]
		},
		"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a",
				"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed",
			"license": "MIT",
			"urls": [
				"bzz-raw://0564ddb19c6d870e27b789d8f985283d815267ad7224883c2d5243c8bacc7dc0",
				"dweb:/ipfs/QmeC953H4sj88ZRFdJNFdmpf7J9SksP1wK4jyMHLo66z49"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9",
				"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
			"keccak256": "0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575",
			"license": "MIT",
			"urls": [
				"bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e",
				"dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
				"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"smart-contract/hardhat/contracts/ClosedSurveyV4.sol": {
			"keccak256": "0x334f6319303c3c7a33957c008c3367e1388264d48597f4ed9d15054d960dfb1d",
			"license": "MIT",
			"urls": [
				"bzz-raw://a03b5e92c34aae41b6637aaa9733a299644dde12f8d8202f70fdf93f21b41b5d",
				"dweb:/ipfs/Qmf63enT6YtJdx7eqqNxM1ax6UR3bES4auFDZ1VojuF35c"
			]
		}
	},
	"version": 1
}